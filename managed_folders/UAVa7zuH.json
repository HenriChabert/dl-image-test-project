{
  "name": "inception_retrained",
  "type": "Filesystem",
  "params": {
    "connection": "filesystem_folders",
    "path": "${projectKey}/${odbId}",
    "notReadyIfEmpty": false,
    "filesSelectionRules": {
      "mode": "ALL",
      "excludeRules": [],
      "includeRules": [],
      "explicitFiles": []
    }
  },
  "flowOptions": {
    "virtualizable": false,
    "rebuildBehavior": "NORMAL",
    "crossProjectBuildBehavior": "DEFAULT"
  },
  "metrics": {
    "probes": [
      {
        "type": "basic",
        "enabled": true,
        "computeOnBuildMode": "PARTITION",
        "meta": {
          "name": "Basic data",
          "level": 0
        },
        "configuration": {}
      }
    ],
    "engineConfig": {
      "padRunsWithMetrics": false,
      "hive": {
        "active": true,
        "extraConf": []
      },
      "basic": {},
      "dss": {
        "active": true,
        "selection": {
          "useMemTable": false,
          "filter": {
            "distinct": false,
            "enabled": false
          },
          "partitionSelectionMethod": "ALL",
          "latestPartitionsN": 1,
          "ordering": {
            "enabled": false,
            "rules": []
          },
          "samplingMethod": "FULL",
          "maxRecords": -1,
          "targetRatio": 0.02,
          "withinFirstN": -1,
          "maxReadUncompressedBytes": -1
        }
      },
      "sql": {
        "active": true
      },
      "impala": {
        "active": true
      },
      "spark": {
        "active": true,
        "extraConf": []
      },
      "python": {}
    },
    "displayedState": {
      "partition": "NP",
      "columns": [],
      "metrics": [
        "basic:COUNT_FILES",
        "basic:SIZE"
      ]
    }
  },
  "checks": {
    "runOnBuild": false,
    "checks": [
      {
        "code": "MANDATORY_FILES \u003d [\n    \u0027/config.json\u0027,\n    \u0027/model_weights_notop.h5\u0027,\n    \u0027/model_labels.csv\u0027,\n    \u0027/model_info.json\u0027\n]\n\n# Define here a function that returns the outcome of the check.\ndef process(last_values, dataset, partition_id):\n    folder_files \u003d dataset.list_paths_in_partition()\n    missing_files \u003d [p for p in MANDATORY_FILES if p not in folder_files]\n    return \u0027OK\u0027 if not missing_files else (\u0027ERROR\u0027, \"The following files are missing: {}\".format(\u0027, \u0027.join(missing_files)))\n",
        "envSelection": {
          "envMode": "INHERIT"
        },
        "type": "python",
        "meta": {
          "name": "Custom check",
          "label": "Filenames"
        },
        "computeOnBuildMode": "PARTITION"
      },
      {
        "code": "import re\nTENSORBOARD_FOLDER_NAME \u003d \u0027tensorboard_logs\u0027\n\n# Define here a function that returns the outcome of the check.\ndef process(last_values, dataset, partition_id):\n    folder_files \u003d dataset.list_paths_in_partition()\n    check_passed \u003d any([re.match(\"(/*){}\".format(TENSORBOARD_FOLDER_NAME), p) for p in folder_files])\n    return \u0027OK\u0027 if check_passed else \u0027ERROR\u0027",
        "envSelection": {
          "envMode": "INHERIT"
        },
        "type": "python",
        "meta": {
          "name": "Custom check",
          "label": "Tensorboard"
        },
        "computeOnBuildMode": "PARTITION"
      }
    ],
    "displayedState": {
      "partition": "NP",
      "checks": [
        "Filenames",
        "Tensorboard"
      ]
    }
  },
  "versionTag": {
    "versionNumber": 6,
    "lastModifiedBy": {
      "login": "admin"
    },
    "lastModifiedOn": 1616003286339
  },
  "creationTag": {
    "versionNumber": 0,
    "lastModifiedBy": {
      "login": "admin"
    },
    "lastModifiedOn": 1611238577671
  },
  "tags": [],
  "customFields": {},
  "checklists": {
    "checklists": []
  }
}